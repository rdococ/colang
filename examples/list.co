"Example defining a list data type using the visitor pattern"

List :=
	[cons: h With: t
		[match: cases cases cons: h With: t
		|head h
		|tail t]
	|empty
		[match: cases cases empty]].

map :=
	[over: ls With: fn
		ls match: [cons: h With: t    List cons: (fn do: h) With: (map over: t With: fn)
				  |empty              ls]].

l := map over: (List cons: 1 With: (List cons: 2 With: (List cons: 3 With: List empty))) With: [do: x x * 2].

console print: l tail tail head. "6"