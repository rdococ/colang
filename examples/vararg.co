; Testing vararg

(define list {
	((cons hd tl) {((match c) (c cons hd tl))})
	((empty) {((match c) (c empty))})
	((new val...)
		((count : val...) < 1) match {
			((true) (list empty))
			((false)
				(list cons val (list new (tail : val...))))
		})
})

(define tail [(x xs...) xs...])

(define map [(fn ls)
	(ls match {
		((cons hd tl) (list cons (fn : hd) (map : fn tl)))
		((empty) ls)
	})
])
(define combine [(fn id ls)
	(ls match {
		((cons hd tl) (combine : fn (fn : id hd) tl))
		((empty) id)
	})
])
(define print-all [(ls)
	(combine : [(_ v)
		(console print v)
	] nil ls)
])

(console print (tail : 1 2 3 4 5))
; (print-all : (list new 1 2 3 4 5))
