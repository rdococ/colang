(define list {
	((cons hd tl) {
		((match c) (c cons hd tl))
		((as-string) ("[" .. hd (tl as-tail-string)))
		((as-tail-string) (", " .. hd (tl as-tail-string)))
	})
	((empty) {
		((match c) (c empty))
		((as-string) "")
		((as-tail-string) "]")
	})
})

(define map [(fn ls)
	(ls match {
		((cons hd tl) (list cons (fn : hd) (map : fn tl)))
		((empty) ls)
	})
])
(define combine [(fn id ls)
	(ls match {
		((cons hd tl) (combine : fn (fn : id hd) tl))
		((empty) id)
	})
])

(define ls (list cons 1 (list cons 2 (list cons 3 (list empty)))))
(console print ls)

(define ls2 (map : [(x) (x * 2)] ls))
(console print ls2)

(combine : [(_ v)
	(console print v)
] 0 ls)
(console print (combine : [(x y) (x * y)] 1 ls))

(combine : [(_ v)
	(console print v)
] 0 ls2)
(console print (combine : [(x y) (x * y)] 1 ls2))

(define lsn (map : [(x) (map : [(y) (((x - 1) * 3) + y)] ls)] ls))
(console print lsn)