"`brainfuck compile:` compiles brainfuck code into a program object. The program can then `instruct:` a backend object on what to do.

`brainfuck interpreter` interprets the instructions using a right-infinite tape of 8-bit wrapping cells, while `brainfuck luaBackend` compiles brainfuck into Lua code. You can write your own machines to interpret brainfuck programs in any way you wish or compile them to any language.

program := brainfuck compile: '+++[>+<-]'.
program instruct: brainfuck interpreter"

'switch' import.

brainfuck := 
    [compile: code
        ip := 0.
        tokenizer := [read
                       ip <- ip + 1.
                       char := code at: ip.
                       switch on: char
                       case: [when '+' | do [if: c c    inc]]
                       case: [when '-' | do [if: c c    dec]]
                       case: [when '<' | do [if: c c   left]]
                       case: [when '>' | do [if: c c  right]]
                       case: [when '[' | do [if: c c   loop]]
                       case: [when ']' | do [if: c c    end]]
                       case: [when ',' | do [if: c c  input]]
                       case: [when '.' | do [if: c c output]]
                       case: [when ''  | do [if: c c    end]]
                       else:             [do  tokenizer read]].
        self :=
            [next
                tokenizer read if:
                    [inc     self compose: [instruct: m m inc] With: self next.
                    |dec     self compose: [instruct: m m dec] With: self next.
                    |left    self compose: [instruct: m m left] With: self next.
                    |right   self compose: [instruct: m m right] With: self next.
                    |loop  
                             body := self next.
                             self compose: [instruct: m m loop: body] With: self next.
                    |end     [instruct: m]
                    |input   self compose: [instruct: m m input] With: self next.
                    |output  self compose: [instruct: m m output] With: self next]
            |compose: a With: b
                [instruct: m
                    a instruct: m.
                    b instruct: m]].
        program := self compose: self next With: [instruct: m m end].
    |interpreter
        tape := Array make.
        tape at: 1 Put: 0.
        tp := 1.
        len := 1.
        self := [inc    tape at: tp Put: (tape at: tp) + 1 % 256.
                |dec    tape at: tp Put: (tape at: tp) - 1 % 256.
                |left   tp <- tp - 1.
                        tp < 1 if: [true console error: 'Tape pointer exceeded left edge' | false].
                |right  tp <- tp + 1.
                        tp > len if:
                            [true  len <- len + 1. tape at: tp Put: 0.
                            |false].
                |loop: body
                    (tape at: tp) > 0 if:
                        [true  body instruct: self. self loop: body.
                        |false]
                |input  tape at: tp Put: (console read: 1) byte.
                |output console write: (tape at: tp) character.
                |end    tape]
    |luaBackend
        rawCode := 'tape, tp = {0}, 1;'.
        code := [append: piece  rawCode <- rawCode, piece | value rawCode].
        self := [inc         code append: 'tape[tp] = (tape[tp] + 1) % 256;'
                |dec         code append: 'tape[tp] = (tape[tp] - 1) % 256;'
                |left        code append: 'tp = tp - 1;'
                |right       code append: 'tp = tp + 1;tape[tp] = tape[tp] or 0;'
                |loop: body  code append: 'while tape[tp] > 0 do '.
                             body instruct: self.
                             code append: ' end;'
                |input       code append: 'tape[tp] = io.read(1):byte();'
                |output      code append: 'io.write(string.char(tape[tp]));'
                |end         code value]].