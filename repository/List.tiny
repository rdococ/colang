"`List with: first Before: rest` returns a linked list with the first item before the rest of the list. `List empty` returns an empty linked list."

List :=
    [with: first Before: rest
        self := [if: cases          cases with: first Before: rest
                |map: fn            List with: (fn of: first) Before: (rest map: fn)
                |fold: fn Onto: id  fn of: first And: (rest fold: fn Onto: id)
                |asString         'List(', first asString, rest asRestString
                |asRestString     ', ', first asString, rest asRestString]
    |empty
        self := [if: cases          cases empty
                |map: fn            List empty
                |fold: fn Onto: id  id
                |asString         'List()'
                |asRestString     ')']].

listTester := [test
    ls := (List with: 1 Before: (List with: 2 Before: (List with: 3 Before: List empty))).
    mls := ls map:  [of: x         x * 2].
    fls := ls fold: [of: x And: y  x * y] Onto: 1.
    
    console print: ls.  "List(1, 2, 3)"
    console print: mls. "List(2, 4, 6)"
    console print: fls. "6"].
