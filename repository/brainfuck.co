"`brainfuck compile:` compiles brainfuck code into a program object. The program can `run:` on a machine, which will instruct the machine what to do.

`brainfuck machine` interprets the instructions using a right-infinite tape of 8-bit wrapping cells, while `brainfuck luaBackend` compiles brainfuck into Lua code. You can write your own machines to interpret brainfuck programs in any way you wish or compile them to any language.

program := brainfuck compile: '+++[>+<-]'.
program run: brainfuck machine"

brainfuck := 
    [tokenize: char
        char = '+' if: [true [if: c c inc] | false
        char = '-' if: [true [if: c c dec] | false
        char = '<' if: [true [if: c c left] | false
        char = '>' if: [true [if: c c right] | false
        char = '[' if: [true [if: c c loop] | false
        char = ']' if: [true [if: c c end] | false
        char = ''  if: [true [if: c c end] | false
        [if: c c noop]]]]]]]].
    |compile: code
        ip := Cell make: 0.
        self :=
            [read
                ip put: ip value + 1. brainfuck tokenize: (code at: ip value)
            |continue
                self read if:
                    [inc    self compose: [run: m m inc] With: self continue.
                    |dec    self compose: [run: m m dec] With: self continue.
                    |left   self compose: [run: m m left] With: self continue.
                    |right  self compose: [run: m m right] With: self continue.
                    |loop  
                            body := self continue.
                            self compose: [run: m m loop: body] With: self continue.
                    |end    [run: m]
                    |noop   self continue]
            |compose: a With: b
                [run: m
                    a run: m.
                    b run: m]].
        program := self compose: self continue With: [run: m m end].
    |machine
        tape := Array make.
        tape at: 1 Put: 0.
        tp := Cell make: 1.
        len := Cell make: 1.
        self := [inc    tape at: tp value Put: (tape at: tp value) + 1 % 256.
                |dec    tape at: tp value Put: (tape at: tp value) - 1 % 256.
                |left   tp put: tp value - 1.
                        tp value < 1 if: [true console error: 'Tape pointer exceeded left edge' | false].
                |right  tp put: tp value + 1.
                        tp value > len value if:
                            [true  len put: len value + 1. tape at: tp value Put: 0.
                            |false].
                |loop: body
                    (tape at: tp value) > 0 if:
                        [true  body run: self. self loop: body.
                        |false]
                |end    tape]
    |luaBackend
        code := Cell make: 'tape, tp = {0}, 1;'.
        self := [inc         code put: code value, 'tape[tp] = (tape[tp] + 1) % 256;'
                |dec         code put: code value, 'tape[tp] = (tape[tp] - 1) % 256;'
                |left        code put: code value, 'tp = tp - 1;'
                |right       code put: code value, 'tp = tp + 1;tape[tp] = tape[tp] or 0;'
                |loop: body  code put: code value, 'while tape[tp] > 0 do ', body run: self, ' end;'
                |end         code value]].