"Constructing graphics combinator objects and drawing them to the console
shapeTester test"

system require: './repository/Vector.co'.

Square :=
  [at: origin WithSize: size
    corner := origin + (Vector makeX: size Y: size).
    [contains: point
      point >= origin and: point < corner
    |origin  origin
    |corner  corner]].

Circle :=
  [at: centre WithRadius: radius
    [contains: point  (point - centre) size < radius
    |origin  Vector makeX: centre x - radius Y: centre y - radius
    |corner  Vector makeX: centre x + radius Y: centre y + radius]].

Union :=
  [of: shapeA And: shapeB
    [contains: point  shapeA contains: point or: (shapeB contains: point)
    |origin  shapeA origin origin: shapeB origin
    |corner  shapeA corner corner: shapeB corner]].

Intersection :=
  [of: shapeA And: shapeB
    [contains: point  shapeA contains: point and: (shapeB contains: point)
    |origin  shapeA origin corner: shapeB origin
    |corner  shapeA corner origin: shapeB corner]].

For :=
  [from: a To: b Do: body
    a <= b match:
      [true
        body with: a.
        For from: a + 1 To: b Do: body.
      |false]].

Drawer :=
  [draw: shape
    For from: shape origin y To: shape corner y Do: [with: y
      For from: shape origin x To: shape corner x Do: [with: x
        shape contains: (Vector makeX: x Y: y) match:
          [true   console write: '#'
          |false  console write: ' ']].
      console print: '']].

shapeTester :=
  [test
    Drawer draw:
      (Union of:
        (Circle at: (Vector makeX: 0 Y: 0) WithRadius: 5)
      And:
        (Square at: (Vector makeX: -10 Y: -10) WithSize: 10))].