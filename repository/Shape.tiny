"Constructing graphics combinator objects and drawing them to the console
shapeTester test"

'Point' import.

Square :=
  [at: origin WithSize: size
    corner := origin + (Point atX: size Y: size).
    [contains: point
      point >= origin and: point < corner
    |origin  origin
    |corner  corner]].

Circle :=
  [at: centre WithRadius: radius
    [contains: point  (point - centre) size < radius
    |origin  Point atX: centre x - radius Y: centre y - radius
    |corner  Point atX: centre x + radius Y: centre y + radius]].

Union :=
  [of: shapeA And: shapeB
    [contains: point  shapeA contains: point or: (shapeB contains: point)
    |origin  shapeA origin origin: shapeB origin
    |corner  shapeA corner corner: shapeB corner]].

Intersection :=
  [of: shapeA And: shapeB
    [contains: point  shapeA contains: point and: (shapeB contains: point)
    |origin  shapeA origin corner: shapeB origin
    |corner  shapeA corner origin: shapeB corner]].

Drawer :=
  [draw: shape
    yLoop := [on: y
      xLoop := [on: x
        console write: (shape contains: (Point atX: x Y: y) if: [true '#' | false ' ']).
        x < shape corner x ifTrue: [do
          xLoop on: x + 1]].
      xLoop on: shape origin x.
      console print: ''.
      y < shape corner y ifTrue: [do
          yLoop on: y + 1]].
    yLoop on: shape origin y].

shapeTester :=
  [test
    Drawer draw:
      (Union of:
        (Circle at: (Point atX: 0 Y: 0) WithRadius: 5)
      And:
        (Square at: (Point atX: -10 Y: -10) WithSize: 10))].